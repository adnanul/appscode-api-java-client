// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appscode/api/kubernetes/v1beta2/client.proto

package com.appscode.api.kubernetes.v1beta2;

/**
 * <pre>
 * Represents a Persistent Disk resource in Google Compute Engine.
 * A GCE PD must exist before mounting to a container. The disk must
 * also be in the same GCE project and zone as the kubelet. A GCE PD
 * can only be mounted as read/write once or read-only many times. GCE
 * PDs support ownership management and SELinux relabeling.
 * </pre>
 *
 * Protobuf type {@code appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource}
 */
public  final class GCEPersistentDiskVolumeSource extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource)
    GCEPersistentDiskVolumeSourceOrBuilder {
  // Use GCEPersistentDiskVolumeSource.newBuilder() to construct.
  private GCEPersistentDiskVolumeSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GCEPersistentDiskVolumeSource() {
    pdName_ = "";
    fsType_ = "";
    partition_ = 0;
    readOnly_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private GCEPersistentDiskVolumeSource(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            pdName_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            fsType_ = s;
            break;
          }
          case 24: {

            partition_ = input.readInt32();
            break;
          }
          case 32: {

            readOnly_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_GCEPersistentDiskVolumeSource_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_GCEPersistentDiskVolumeSource_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.class, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder.class);
  }

  public static final int PDNAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object pdName_;
  /**
   * <pre>
   * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>string pdName = 1;</code>
   */
  public java.lang.String getPdName() {
    java.lang.Object ref = pdName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      pdName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>string pdName = 1;</code>
   */
  public com.google.protobuf.ByteString
      getPdNameBytes() {
    java.lang.Object ref = pdName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      pdName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FSTYPE_FIELD_NUMBER = 2;
  private volatile java.lang.Object fsType_;
  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 2;</code>
   */
  public java.lang.String getFsType() {
    java.lang.Object ref = fsType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      fsType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 2;</code>
   */
  public com.google.protobuf.ByteString
      getFsTypeBytes() {
    java.lang.Object ref = fsType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      fsType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARTITION_FIELD_NUMBER = 3;
  private int partition_;
  /**
   * <pre>
   * The partition in the volume that you want to mount.
   * If omitted, the default is to mount by volume name.
   * Examples: For volume /dev/sda1, you specify the partition as "1".
   * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>int32 partition = 3;</code>
   */
  public int getPartition() {
    return partition_;
  }

  public static final int READONLY_FIELD_NUMBER = 4;
  private boolean readOnly_;
  /**
   * <pre>
   * ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * Defaults to false.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>bool readOnly = 4;</code>
   */
  public boolean getReadOnly() {
    return readOnly_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getPdNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, pdName_);
    }
    if (!getFsTypeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, fsType_);
    }
    if (partition_ != 0) {
      output.writeInt32(3, partition_);
    }
    if (readOnly_ != false) {
      output.writeBool(4, readOnly_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getPdNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, pdName_);
    }
    if (!getFsTypeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, fsType_);
    }
    if (partition_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, partition_);
    }
    if (readOnly_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, readOnly_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource)) {
      return super.equals(obj);
    }
    com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource other = (com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource) obj;

    boolean result = true;
    result = result && getPdName()
        .equals(other.getPdName());
    result = result && getFsType()
        .equals(other.getFsType());
    result = result && (getPartition()
        == other.getPartition());
    result = result && (getReadOnly()
        == other.getReadOnly());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PDNAME_FIELD_NUMBER;
    hash = (53 * hash) + getPdName().hashCode();
    hash = (37 * hash) + FSTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getFsType().hashCode();
    hash = (37 * hash) + PARTITION_FIELD_NUMBER;
    hash = (53 * hash) + getPartition();
    hash = (37 * hash) + READONLY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getReadOnly());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Represents a Persistent Disk resource in Google Compute Engine.
   * A GCE PD must exist before mounting to a container. The disk must
   * also be in the same GCE project and zone as the kubelet. A GCE PD
   * can only be mounted as read/write once or read-only many times. GCE
   * PDs support ownership management and SELinux relabeling.
   * </pre>
   *
   * Protobuf type {@code appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource)
      com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_GCEPersistentDiskVolumeSource_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_GCEPersistentDiskVolumeSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.class, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder.class);
    }

    // Construct using com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      pdName_ = "";

      fsType_ = "";

      partition_ = 0;

      readOnly_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_GCEPersistentDiskVolumeSource_descriptor;
    }

    public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource getDefaultInstanceForType() {
      return com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.getDefaultInstance();
    }

    public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource build() {
      com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource buildPartial() {
      com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource result = new com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource(this);
      result.pdName_ = pdName_;
      result.fsType_ = fsType_;
      result.partition_ = partition_;
      result.readOnly_ = readOnly_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource) {
        return mergeFrom((com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource other) {
      if (other == com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.getDefaultInstance()) return this;
      if (!other.getPdName().isEmpty()) {
        pdName_ = other.pdName_;
        onChanged();
      }
      if (!other.getFsType().isEmpty()) {
        fsType_ = other.fsType_;
        onChanged();
      }
      if (other.getPartition() != 0) {
        setPartition(other.getPartition());
      }
      if (other.getReadOnly() != false) {
        setReadOnly(other.getReadOnly());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object pdName_ = "";
    /**
     * <pre>
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>string pdName = 1;</code>
     */
    public java.lang.String getPdName() {
      java.lang.Object ref = pdName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        pdName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>string pdName = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPdNameBytes() {
      java.lang.Object ref = pdName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        pdName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>string pdName = 1;</code>
     */
    public Builder setPdName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pdName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>string pdName = 1;</code>
     */
    public Builder clearPdName() {
      
      pdName_ = getDefaultInstance().getPdName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>string pdName = 1;</code>
     */
    public Builder setPdNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pdName_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object fsType_ = "";
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 2;</code>
     */
    public java.lang.String getFsType() {
      java.lang.Object ref = fsType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fsType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFsTypeBytes() {
      java.lang.Object ref = fsType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fsType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 2;</code>
     */
    public Builder setFsType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fsType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 2;</code>
     */
    public Builder clearFsType() {
      
      fsType_ = getDefaultInstance().getFsType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 2;</code>
     */
    public Builder setFsTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      fsType_ = value;
      onChanged();
      return this;
    }

    private int partition_ ;
    /**
     * <pre>
     * The partition in the volume that you want to mount.
     * If omitted, the default is to mount by volume name.
     * Examples: For volume /dev/sda1, you specify the partition as "1".
     * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>int32 partition = 3;</code>
     */
    public int getPartition() {
      return partition_;
    }
    /**
     * <pre>
     * The partition in the volume that you want to mount.
     * If omitted, the default is to mount by volume name.
     * Examples: For volume /dev/sda1, you specify the partition as "1".
     * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>int32 partition = 3;</code>
     */
    public Builder setPartition(int value) {
      
      partition_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The partition in the volume that you want to mount.
     * If omitted, the default is to mount by volume name.
     * Examples: For volume /dev/sda1, you specify the partition as "1".
     * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>int32 partition = 3;</code>
     */
    public Builder clearPartition() {
      
      partition_ = 0;
      onChanged();
      return this;
    }

    private boolean readOnly_ ;
    /**
     * <pre>
     * ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * Defaults to false.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>bool readOnly = 4;</code>
     */
    public boolean getReadOnly() {
      return readOnly_;
    }
    /**
     * <pre>
     * ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * Defaults to false.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>bool readOnly = 4;</code>
     */
    public Builder setReadOnly(boolean value) {
      
      readOnly_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * Defaults to false.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>bool readOnly = 4;</code>
     */
    public Builder clearReadOnly() {
      
      readOnly_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource)
  }

  // @@protoc_insertion_point(class_scope:appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource)
  private static final com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource();
  }

  public static com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GCEPersistentDiskVolumeSource>
      PARSER = new com.google.protobuf.AbstractParser<GCEPersistentDiskVolumeSource>() {
    public GCEPersistentDiskVolumeSource parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new GCEPersistentDiskVolumeSource(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GCEPersistentDiskVolumeSource> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GCEPersistentDiskVolumeSource> getParserForType() {
    return PARSER;
  }

  public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

