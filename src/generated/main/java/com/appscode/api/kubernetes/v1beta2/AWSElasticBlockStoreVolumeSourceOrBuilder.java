// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appscode/api/kubernetes/v1beta2/client.proto

package com.appscode.api.kubernetes.v1beta2;

public interface AWSElasticBlockStoreVolumeSourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * </pre>
   *
   * <code>string volumeID = 1;</code>
   */
  java.lang.String getVolumeID();
  /**
   * <pre>
   * Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * </pre>
   *
   * <code>string volumeID = 1;</code>
   */
  com.google.protobuf.ByteString
      getVolumeIDBytes();

  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 2;</code>
   */
  java.lang.String getFsType();
  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 2;</code>
   */
  com.google.protobuf.ByteString
      getFsTypeBytes();

  /**
   * <pre>
   * The partition in the volume that you want to mount.
   * If omitted, the default is to mount by volume name.
   * Examples: For volume /dev/sda1, you specify the partition as "1".
   * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
   * </pre>
   *
   * <code>int32 partition = 3;</code>
   */
  int getPartition();

  /**
   * <pre>
   * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
   * If omitted, the default is "false".
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * </pre>
   *
   * <code>bool readOnly = 4;</code>
   */
  boolean getReadOnly();
}
