// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appscode/api/kubernetes/v1beta2/client.proto

package com.appscode.api.kubernetes.v1beta2;

public interface DownwardAPIVolumeSourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:appscode.kubernetes.v1beta2.DownwardAPIVolumeSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Items is a list of downward API volume file
   * +optional
   * </pre>
   *
   * <code>repeated .appscode.kubernetes.v1beta2.DownwardAPIVolumeFile items = 1;</code>
   */
  java.util.List<com.appscode.api.kubernetes.v1beta2.DownwardAPIVolumeFile> 
      getItemsList();
  /**
   * <pre>
   * Items is a list of downward API volume file
   * +optional
   * </pre>
   *
   * <code>repeated .appscode.kubernetes.v1beta2.DownwardAPIVolumeFile items = 1;</code>
   */
  com.appscode.api.kubernetes.v1beta2.DownwardAPIVolumeFile getItems(int index);
  /**
   * <pre>
   * Items is a list of downward API volume file
   * +optional
   * </pre>
   *
   * <code>repeated .appscode.kubernetes.v1beta2.DownwardAPIVolumeFile items = 1;</code>
   */
  int getItemsCount();
  /**
   * <pre>
   * Items is a list of downward API volume file
   * +optional
   * </pre>
   *
   * <code>repeated .appscode.kubernetes.v1beta2.DownwardAPIVolumeFile items = 1;</code>
   */
  java.util.List<? extends com.appscode.api.kubernetes.v1beta2.DownwardAPIVolumeFileOrBuilder> 
      getItemsOrBuilderList();
  /**
   * <pre>
   * Items is a list of downward API volume file
   * +optional
   * </pre>
   *
   * <code>repeated .appscode.kubernetes.v1beta2.DownwardAPIVolumeFile items = 1;</code>
   */
  com.appscode.api.kubernetes.v1beta2.DownwardAPIVolumeFileOrBuilder getItemsOrBuilder(
      int index);

  /**
   * <pre>
   * Optional: mode bits to use on created files by default. Must be a
   * value between 0 and 0777. Defaults to 0644.
   * Directories within the path are not affected by this setting.
   * This might be in conflict with other options that affect the file
   * mode, like fsGroup, and the result can be other mode bits set.
   * +optional
   * </pre>
   *
   * <code>int32 defaultMode = 2;</code>
   */
  int getDefaultMode();
}
