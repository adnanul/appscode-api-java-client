// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appscode/api/kubernetes/v1beta2/client.proto

package com.appscode.api.kubernetes.v1beta2;

public interface RBDVolumeSourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:appscode.kubernetes.v1beta2.RBDVolumeSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A collection of Ceph monitors.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>repeated string monitors = 1;</code>
   */
  java.util.List<java.lang.String>
      getMonitorsList();
  /**
   * <pre>
   * A collection of Ceph monitors.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>repeated string monitors = 1;</code>
   */
  int getMonitorsCount();
  /**
   * <pre>
   * A collection of Ceph monitors.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>repeated string monitors = 1;</code>
   */
  java.lang.String getMonitors(int index);
  /**
   * <pre>
   * A collection of Ceph monitors.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>repeated string monitors = 1;</code>
   */
  com.google.protobuf.ByteString
      getMonitorsBytes(int index);

  /**
   * <pre>
   * The rados image name.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>string image = 2;</code>
   */
  java.lang.String getImage();
  /**
   * <pre>
   * The rados image name.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>string image = 2;</code>
   */
  com.google.protobuf.ByteString
      getImageBytes();

  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#rbd
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 3;</code>
   */
  java.lang.String getFsType();
  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#rbd
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 3;</code>
   */
  com.google.protobuf.ByteString
      getFsTypeBytes();

  /**
   * <pre>
   * The rados pool name.
   * Default is rbd.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it.
   * </pre>
   *
   * <code>string pool = 4;</code>
   */
  java.lang.String getPool();
  /**
   * <pre>
   * The rados pool name.
   * Default is rbd.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it.
   * </pre>
   *
   * <code>string pool = 4;</code>
   */
  com.google.protobuf.ByteString
      getPoolBytes();

  /**
   * <pre>
   * The rados user name.
   * Default is admin.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>string user = 5;</code>
   */
  java.lang.String getUser();
  /**
   * <pre>
   * The rados user name.
   * Default is admin.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>string user = 5;</code>
   */
  com.google.protobuf.ByteString
      getUserBytes();

  /**
   * <pre>
   * Keyring is the path to key ring for RBDUser.
   * Default is /etc/ceph/keyring.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>string keyring = 6;</code>
   */
  java.lang.String getKeyring();
  /**
   * <pre>
   * Keyring is the path to key ring for RBDUser.
   * Default is /etc/ceph/keyring.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>string keyring = 6;</code>
   */
  com.google.protobuf.ByteString
      getKeyringBytes();

  /**
   * <pre>
   * SecretRef is name of the authentication secret for RBDUser. If provided
   * overrides keyring.
   * Default is nil.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>.appscode.kubernetes.v1beta2.ObjectReference secretRef = 7;</code>
   */
  boolean hasSecretRef();
  /**
   * <pre>
   * SecretRef is name of the authentication secret for RBDUser. If provided
   * overrides keyring.
   * Default is nil.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>.appscode.kubernetes.v1beta2.ObjectReference secretRef = 7;</code>
   */
  com.appscode.api.kubernetes.v1beta2.ObjectReference getSecretRef();
  /**
   * <pre>
   * SecretRef is name of the authentication secret for RBDUser. If provided
   * overrides keyring.
   * Default is nil.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>.appscode.kubernetes.v1beta2.ObjectReference secretRef = 7;</code>
   */
  com.appscode.api.kubernetes.v1beta2.ObjectReferenceOrBuilder getSecretRefOrBuilder();

  /**
   * <pre>
   * ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * Defaults to false.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
   * </pre>
   *
   * <code>bool readOnly = 8;</code>
   */
  boolean getReadOnly();
}
