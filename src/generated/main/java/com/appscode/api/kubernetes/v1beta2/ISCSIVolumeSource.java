// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appscode/api/kubernetes/v1beta2/client.proto

package com.appscode.api.kubernetes.v1beta2;

/**
 * <pre>
 * Represents an ISCSI disk.
 * ISCSI volumes can only be mounted as read/write once.
 * ISCSI volumes support ownership management and SELinux relabeling.
 * </pre>
 *
 * Protobuf type {@code appscode.kubernetes.v1beta2.ISCSIVolumeSource}
 */
public  final class ISCSIVolumeSource extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:appscode.kubernetes.v1beta2.ISCSIVolumeSource)
    ISCSIVolumeSourceOrBuilder {
  // Use ISCSIVolumeSource.newBuilder() to construct.
  private ISCSIVolumeSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ISCSIVolumeSource() {
    targetPortal_ = "";
    iqn_ = "";
    lun_ = 0;
    iscsiInterface_ = "";
    fsType_ = "";
    readOnly_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ISCSIVolumeSource(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            targetPortal_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            iqn_ = s;
            break;
          }
          case 24: {

            lun_ = input.readInt32();
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            iscsiInterface_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            fsType_ = s;
            break;
          }
          case 48: {

            readOnly_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_ISCSIVolumeSource_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_ISCSIVolumeSource_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.class, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder.class);
  }

  public static final int TARGETPORTAL_FIELD_NUMBER = 1;
  private volatile java.lang.Object targetPortal_;
  /**
   * <pre>
   * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
   * is other than default (typically TCP ports 860 and 3260).
   * </pre>
   *
   * <code>string targetPortal = 1;</code>
   */
  public java.lang.String getTargetPortal() {
    java.lang.Object ref = targetPortal_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      targetPortal_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
   * is other than default (typically TCP ports 860 and 3260).
   * </pre>
   *
   * <code>string targetPortal = 1;</code>
   */
  public com.google.protobuf.ByteString
      getTargetPortalBytes() {
    java.lang.Object ref = targetPortal_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      targetPortal_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IQN_FIELD_NUMBER = 2;
  private volatile java.lang.Object iqn_;
  /**
   * <pre>
   * Target iSCSI Qualified Name.
   * </pre>
   *
   * <code>string iqn = 2;</code>
   */
  public java.lang.String getIqn() {
    java.lang.Object ref = iqn_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      iqn_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Target iSCSI Qualified Name.
   * </pre>
   *
   * <code>string iqn = 2;</code>
   */
  public com.google.protobuf.ByteString
      getIqnBytes() {
    java.lang.Object ref = iqn_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      iqn_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LUN_FIELD_NUMBER = 3;
  private int lun_;
  /**
   * <pre>
   * iSCSI target lun number.
   * </pre>
   *
   * <code>int32 lun = 3;</code>
   */
  public int getLun() {
    return lun_;
  }

  public static final int ISCSIINTERFACE_FIELD_NUMBER = 4;
  private volatile java.lang.Object iscsiInterface_;
  /**
   * <pre>
   * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
   * </pre>
   *
   * <code>string iscsiInterface = 4;</code>
   */
  public java.lang.String getIscsiInterface() {
    java.lang.Object ref = iscsiInterface_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      iscsiInterface_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
   * </pre>
   *
   * <code>string iscsiInterface = 4;</code>
   */
  public com.google.protobuf.ByteString
      getIscsiInterfaceBytes() {
    java.lang.Object ref = iscsiInterface_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      iscsiInterface_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FSTYPE_FIELD_NUMBER = 5;
  private volatile java.lang.Object fsType_;
  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 5;</code>
   */
  public java.lang.String getFsType() {
    java.lang.Object ref = fsType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      fsType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Filesystem type of the volume that you want to mount.
   * Tip: Ensure that the filesystem type is supported by the host operating system.
   * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
   * TODO: how do we prevent errors in the filesystem from compromising the machine
   * </pre>
   *
   * <code>string fsType = 5;</code>
   */
  public com.google.protobuf.ByteString
      getFsTypeBytes() {
    java.lang.Object ref = fsType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      fsType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int READONLY_FIELD_NUMBER = 6;
  private boolean readOnly_;
  /**
   * <pre>
   * ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * Defaults to false.
   * </pre>
   *
   * <code>bool readOnly = 6;</code>
   */
  public boolean getReadOnly() {
    return readOnly_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getTargetPortalBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, targetPortal_);
    }
    if (!getIqnBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, iqn_);
    }
    if (lun_ != 0) {
      output.writeInt32(3, lun_);
    }
    if (!getIscsiInterfaceBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, iscsiInterface_);
    }
    if (!getFsTypeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, fsType_);
    }
    if (readOnly_ != false) {
      output.writeBool(6, readOnly_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getTargetPortalBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, targetPortal_);
    }
    if (!getIqnBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, iqn_);
    }
    if (lun_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, lun_);
    }
    if (!getIscsiInterfaceBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, iscsiInterface_);
    }
    if (!getFsTypeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, fsType_);
    }
    if (readOnly_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, readOnly_);
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource)) {
      return super.equals(obj);
    }
    com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource other = (com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource) obj;

    boolean result = true;
    result = result && getTargetPortal()
        .equals(other.getTargetPortal());
    result = result && getIqn()
        .equals(other.getIqn());
    result = result && (getLun()
        == other.getLun());
    result = result && getIscsiInterface()
        .equals(other.getIscsiInterface());
    result = result && getFsType()
        .equals(other.getFsType());
    result = result && (getReadOnly()
        == other.getReadOnly());
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TARGETPORTAL_FIELD_NUMBER;
    hash = (53 * hash) + getTargetPortal().hashCode();
    hash = (37 * hash) + IQN_FIELD_NUMBER;
    hash = (53 * hash) + getIqn().hashCode();
    hash = (37 * hash) + LUN_FIELD_NUMBER;
    hash = (53 * hash) + getLun();
    hash = (37 * hash) + ISCSIINTERFACE_FIELD_NUMBER;
    hash = (53 * hash) + getIscsiInterface().hashCode();
    hash = (37 * hash) + FSTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getFsType().hashCode();
    hash = (37 * hash) + READONLY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getReadOnly());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Represents an ISCSI disk.
   * ISCSI volumes can only be mounted as read/write once.
   * ISCSI volumes support ownership management and SELinux relabeling.
   * </pre>
   *
   * Protobuf type {@code appscode.kubernetes.v1beta2.ISCSIVolumeSource}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:appscode.kubernetes.v1beta2.ISCSIVolumeSource)
      com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_ISCSIVolumeSource_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_ISCSIVolumeSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.class, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder.class);
    }

    // Construct using com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      targetPortal_ = "";

      iqn_ = "";

      lun_ = 0;

      iscsiInterface_ = "";

      fsType_ = "";

      readOnly_ = false;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_ISCSIVolumeSource_descriptor;
    }

    public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource getDefaultInstanceForType() {
      return com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.getDefaultInstance();
    }

    public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource build() {
      com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource buildPartial() {
      com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource result = new com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource(this);
      result.targetPortal_ = targetPortal_;
      result.iqn_ = iqn_;
      result.lun_ = lun_;
      result.iscsiInterface_ = iscsiInterface_;
      result.fsType_ = fsType_;
      result.readOnly_ = readOnly_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource) {
        return mergeFrom((com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource other) {
      if (other == com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.getDefaultInstance()) return this;
      if (!other.getTargetPortal().isEmpty()) {
        targetPortal_ = other.targetPortal_;
        onChanged();
      }
      if (!other.getIqn().isEmpty()) {
        iqn_ = other.iqn_;
        onChanged();
      }
      if (other.getLun() != 0) {
        setLun(other.getLun());
      }
      if (!other.getIscsiInterface().isEmpty()) {
        iscsiInterface_ = other.iscsiInterface_;
        onChanged();
      }
      if (!other.getFsType().isEmpty()) {
        fsType_ = other.fsType_;
        onChanged();
      }
      if (other.getReadOnly() != false) {
        setReadOnly(other.getReadOnly());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object targetPortal_ = "";
    /**
     * <pre>
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
     * is other than default (typically TCP ports 860 and 3260).
     * </pre>
     *
     * <code>string targetPortal = 1;</code>
     */
    public java.lang.String getTargetPortal() {
      java.lang.Object ref = targetPortal_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        targetPortal_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
     * is other than default (typically TCP ports 860 and 3260).
     * </pre>
     *
     * <code>string targetPortal = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTargetPortalBytes() {
      java.lang.Object ref = targetPortal_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        targetPortal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
     * is other than default (typically TCP ports 860 and 3260).
     * </pre>
     *
     * <code>string targetPortal = 1;</code>
     */
    public Builder setTargetPortal(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      targetPortal_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
     * is other than default (typically TCP ports 860 and 3260).
     * </pre>
     *
     * <code>string targetPortal = 1;</code>
     */
    public Builder clearTargetPortal() {
      
      targetPortal_ = getDefaultInstance().getTargetPortal();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port
     * is other than default (typically TCP ports 860 and 3260).
     * </pre>
     *
     * <code>string targetPortal = 1;</code>
     */
    public Builder setTargetPortalBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      targetPortal_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object iqn_ = "";
    /**
     * <pre>
     * Target iSCSI Qualified Name.
     * </pre>
     *
     * <code>string iqn = 2;</code>
     */
    public java.lang.String getIqn() {
      java.lang.Object ref = iqn_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iqn_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Target iSCSI Qualified Name.
     * </pre>
     *
     * <code>string iqn = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIqnBytes() {
      java.lang.Object ref = iqn_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iqn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Target iSCSI Qualified Name.
     * </pre>
     *
     * <code>string iqn = 2;</code>
     */
    public Builder setIqn(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      iqn_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target iSCSI Qualified Name.
     * </pre>
     *
     * <code>string iqn = 2;</code>
     */
    public Builder clearIqn() {
      
      iqn_ = getDefaultInstance().getIqn();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Target iSCSI Qualified Name.
     * </pre>
     *
     * <code>string iqn = 2;</code>
     */
    public Builder setIqnBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      iqn_ = value;
      onChanged();
      return this;
    }

    private int lun_ ;
    /**
     * <pre>
     * iSCSI target lun number.
     * </pre>
     *
     * <code>int32 lun = 3;</code>
     */
    public int getLun() {
      return lun_;
    }
    /**
     * <pre>
     * iSCSI target lun number.
     * </pre>
     *
     * <code>int32 lun = 3;</code>
     */
    public Builder setLun(int value) {
      
      lun_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * iSCSI target lun number.
     * </pre>
     *
     * <code>int32 lun = 3;</code>
     */
    public Builder clearLun() {
      
      lun_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object iscsiInterface_ = "";
    /**
     * <pre>
     * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
     * </pre>
     *
     * <code>string iscsiInterface = 4;</code>
     */
    public java.lang.String getIscsiInterface() {
      java.lang.Object ref = iscsiInterface_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iscsiInterface_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
     * </pre>
     *
     * <code>string iscsiInterface = 4;</code>
     */
    public com.google.protobuf.ByteString
        getIscsiInterfaceBytes() {
      java.lang.Object ref = iscsiInterface_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iscsiInterface_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
     * </pre>
     *
     * <code>string iscsiInterface = 4;</code>
     */
    public Builder setIscsiInterface(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      iscsiInterface_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
     * </pre>
     *
     * <code>string iscsiInterface = 4;</code>
     */
    public Builder clearIscsiInterface() {
      
      iscsiInterface_ = getDefaultInstance().getIscsiInterface();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
     * </pre>
     *
     * <code>string iscsiInterface = 4;</code>
     */
    public Builder setIscsiInterfaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      iscsiInterface_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object fsType_ = "";
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 5;</code>
     */
    public java.lang.String getFsType() {
      java.lang.Object ref = fsType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fsType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 5;</code>
     */
    public com.google.protobuf.ByteString
        getFsTypeBytes() {
      java.lang.Object ref = fsType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fsType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 5;</code>
     */
    public Builder setFsType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fsType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 5;</code>
     */
    public Builder clearFsType() {
      
      fsType_ = getDefaultInstance().getFsType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Filesystem type of the volume that you want to mount.
     * Tip: Ensure that the filesystem type is supported by the host operating system.
     * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
     * TODO: how do we prevent errors in the filesystem from compromising the machine
     * </pre>
     *
     * <code>string fsType = 5;</code>
     */
    public Builder setFsTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      fsType_ = value;
      onChanged();
      return this;
    }

    private boolean readOnly_ ;
    /**
     * <pre>
     * ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * Defaults to false.
     * </pre>
     *
     * <code>bool readOnly = 6;</code>
     */
    public boolean getReadOnly() {
      return readOnly_;
    }
    /**
     * <pre>
     * ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * Defaults to false.
     * </pre>
     *
     * <code>bool readOnly = 6;</code>
     */
    public Builder setReadOnly(boolean value) {
      
      readOnly_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * Defaults to false.
     * </pre>
     *
     * <code>bool readOnly = 6;</code>
     */
    public Builder clearReadOnly() {
      
      readOnly_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:appscode.kubernetes.v1beta2.ISCSIVolumeSource)
  }

  // @@protoc_insertion_point(class_scope:appscode.kubernetes.v1beta2.ISCSIVolumeSource)
  private static final com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource();
  }

  public static com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ISCSIVolumeSource>
      PARSER = new com.google.protobuf.AbstractParser<ISCSIVolumeSource>() {
    public ISCSIVolumeSource parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new ISCSIVolumeSource(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ISCSIVolumeSource> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ISCSIVolumeSource> getParserForType() {
    return PARSER;
  }

  public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

