// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appscode/api/kubernetes/v1beta2/client.proto

package com.appscode.api.kubernetes.v1beta2;

/**
 * <pre>
 * PersistentVolumeSource is similar to VolumeSource but meant for the
 * administrator who creates PVs. Exactly one of its members must be set.
 * </pre>
 *
 * Protobuf type {@code appscode.kubernetes.v1beta2.PersistentVolumeSource}
 */
public  final class PersistentVolumeSource extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:appscode.kubernetes.v1beta2.PersistentVolumeSource)
    PersistentVolumeSourceOrBuilder {
  // Use PersistentVolumeSource.newBuilder() to construct.
  private PersistentVolumeSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PersistentVolumeSource() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private PersistentVolumeSource(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder subBuilder = null;
            if (gcePersistentDisk_ != null) {
              subBuilder = gcePersistentDisk_.toBuilder();
            }
            gcePersistentDisk_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(gcePersistentDisk_);
              gcePersistentDisk_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.Builder subBuilder = null;
            if (awsElasticBlockStore_ != null) {
              subBuilder = awsElasticBlockStore_.toBuilder();
            }
            awsElasticBlockStore_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(awsElasticBlockStore_);
              awsElasticBlockStore_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.Builder subBuilder = null;
            if (hostPath_ != null) {
              subBuilder = hostPath_.toBuilder();
            }
            hostPath_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(hostPath_);
              hostPath_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.Builder subBuilder = null;
            if (glusterfs_ != null) {
              subBuilder = glusterfs_.toBuilder();
            }
            glusterfs_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(glusterfs_);
              glusterfs_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.Builder subBuilder = null;
            if (nfs_ != null) {
              subBuilder = nfs_.toBuilder();
            }
            nfs_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(nfs_);
              nfs_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.Builder subBuilder = null;
            if (rbd_ != null) {
              subBuilder = rbd_.toBuilder();
            }
            rbd_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(rbd_);
              rbd_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder subBuilder = null;
            if (iscsi_ != null) {
              subBuilder = iscsi_.toBuilder();
            }
            iscsi_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(iscsi_);
              iscsi_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.Builder subBuilder = null;
            if (cinder_ != null) {
              subBuilder = cinder_.toBuilder();
            }
            cinder_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cinder_);
              cinder_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.Builder subBuilder = null;
            if (cephfs_ != null) {
              subBuilder = cephfs_.toBuilder();
            }
            cephfs_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cephfs_);
              cephfs_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            com.appscode.api.kubernetes.v1beta2.FCVolumeSource.Builder subBuilder = null;
            if (fc_ != null) {
              subBuilder = fc_.toBuilder();
            }
            fc_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.FCVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fc_);
              fc_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.Builder subBuilder = null;
            if (flocker_ != null) {
              subBuilder = flocker_.toBuilder();
            }
            flocker_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(flocker_);
              flocker_ = subBuilder.buildPartial();
            }

            break;
          }
          case 98: {
            com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.Builder subBuilder = null;
            if (flexVolume_ != null) {
              subBuilder = flexVolume_.toBuilder();
            }
            flexVolume_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(flexVolume_);
              flexVolume_ = subBuilder.buildPartial();
            }

            break;
          }
          case 106: {
            com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.Builder subBuilder = null;
            if (azureFile_ != null) {
              subBuilder = azureFile_.toBuilder();
            }
            azureFile_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(azureFile_);
              azureFile_ = subBuilder.buildPartial();
            }

            break;
          }
          case 114: {
            com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.Builder subBuilder = null;
            if (vsphereVolume_ != null) {
              subBuilder = vsphereVolume_.toBuilder();
            }
            vsphereVolume_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(vsphereVolume_);
              vsphereVolume_ = subBuilder.buildPartial();
            }

            break;
          }
          case 122: {
            com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.Builder subBuilder = null;
            if (quobyte_ != null) {
              subBuilder = quobyte_.toBuilder();
            }
            quobyte_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(quobyte_);
              quobyte_ = subBuilder.buildPartial();
            }

            break;
          }
          case 130: {
            com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.Builder subBuilder = null;
            if (azureDisk_ != null) {
              subBuilder = azureDisk_.toBuilder();
            }
            azureDisk_ = input.readMessage(com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(azureDisk_);
              azureDisk_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_PersistentVolumeSource_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_PersistentVolumeSource_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.class, com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.Builder.class);
  }

  public static final int GCEPERSISTENTDISK_FIELD_NUMBER = 1;
  private com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk_;
  /**
   * <pre>
   * GCEPersistentDisk represents a GCE Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
   */
  public boolean hasGcePersistentDisk() {
    return gcePersistentDisk_ != null;
  }
  /**
   * <pre>
   * GCEPersistentDisk represents a GCE Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource getGcePersistentDisk() {
    return gcePersistentDisk_ == null ? com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.getDefaultInstance() : gcePersistentDisk_;
  }
  /**
   * <pre>
   * GCEPersistentDisk represents a GCE Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSourceOrBuilder getGcePersistentDiskOrBuilder() {
    return getGcePersistentDisk();
  }

  public static final int AWSELASTICBLOCKSTORE_FIELD_NUMBER = 2;
  private com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore_;
  /**
   * <pre>
   * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
   */
  public boolean hasAwsElasticBlockStore() {
    return awsElasticBlockStore_ != null;
  }
  /**
   * <pre>
   * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource getAwsElasticBlockStore() {
    return awsElasticBlockStore_ == null ? com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.getDefaultInstance() : awsElasticBlockStore_;
  }
  /**
   * <pre>
   * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSourceOrBuilder getAwsElasticBlockStoreOrBuilder() {
    return getAwsElasticBlockStore();
  }

  public static final int HOSTPATH_FIELD_NUMBER = 3;
  private com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource hostPath_;
  /**
   * <pre>
   * HostPath represents a directory on the host.
   * Provisioned by a developer or tester.
   * This is useful for single-node development and testing only!
   * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
   */
  public boolean hasHostPath() {
    return hostPath_ != null;
  }
  /**
   * <pre>
   * HostPath represents a directory on the host.
   * Provisioned by a developer or tester.
   * This is useful for single-node development and testing only!
   * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource getHostPath() {
    return hostPath_ == null ? com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.getDefaultInstance() : hostPath_;
  }
  /**
   * <pre>
   * HostPath represents a directory on the host.
   * Provisioned by a developer or tester.
   * This is useful for single-node development and testing only!
   * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.HostPathVolumeSourceOrBuilder getHostPathOrBuilder() {
    return getHostPath();
  }

  public static final int GLUSTERFS_FIELD_NUMBER = 4;
  private com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs_;
  /**
   * <pre>
   * Glusterfs represents a Glusterfs volume that is attached to a host and
   * exposed to the pod. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
   */
  public boolean hasGlusterfs() {
    return glusterfs_ != null;
  }
  /**
   * <pre>
   * Glusterfs represents a Glusterfs volume that is attached to a host and
   * exposed to the pod. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource getGlusterfs() {
    return glusterfs_ == null ? com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.getDefaultInstance() : glusterfs_;
  }
  /**
   * <pre>
   * Glusterfs represents a Glusterfs volume that is attached to a host and
   * exposed to the pod. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSourceOrBuilder getGlusterfsOrBuilder() {
    return getGlusterfs();
  }

  public static final int NFS_FIELD_NUMBER = 5;
  private com.appscode.api.kubernetes.v1beta2.NFSVolumeSource nfs_;
  /**
   * <pre>
   * NFS represents an NFS mount on the host. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
   */
  public boolean hasNfs() {
    return nfs_ != null;
  }
  /**
   * <pre>
   * NFS represents an NFS mount on the host. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.NFSVolumeSource getNfs() {
    return nfs_ == null ? com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.getDefaultInstance() : nfs_;
  }
  /**
   * <pre>
   * NFS represents an NFS mount on the host. Provisioned by an admin.
   * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.NFSVolumeSourceOrBuilder getNfsOrBuilder() {
    return getNfs();
  }

  public static final int RBD_FIELD_NUMBER = 6;
  private com.appscode.api.kubernetes.v1beta2.RBDVolumeSource rbd_;
  /**
   * <pre>
   * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
   */
  public boolean hasRbd() {
    return rbd_ != null;
  }
  /**
   * <pre>
   * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.RBDVolumeSource getRbd() {
    return rbd_ == null ? com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.getDefaultInstance() : rbd_;
  }
  /**
   * <pre>
   * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
   * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.RBDVolumeSourceOrBuilder getRbdOrBuilder() {
    return getRbd();
  }

  public static final int ISCSI_FIELD_NUMBER = 7;
  private com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource iscsi_;
  /**
   * <pre>
   * ISCSI represents an ISCSI Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
   */
  public boolean hasIscsi() {
    return iscsi_ != null;
  }
  /**
   * <pre>
   * ISCSI represents an ISCSI Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource getIscsi() {
    return iscsi_ == null ? com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.getDefaultInstance() : iscsi_;
  }
  /**
   * <pre>
   * ISCSI represents an ISCSI Disk resource that is attached to a
   * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSourceOrBuilder getIscsiOrBuilder() {
    return getIscsi();
  }

  public static final int CINDER_FIELD_NUMBER = 8;
  private com.appscode.api.kubernetes.v1beta2.CinderVolumeSource cinder_;
  /**
   * <pre>
   * Cinder represents a cinder volume attached and mounted on kubelets host machine
   * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
   */
  public boolean hasCinder() {
    return cinder_ != null;
  }
  /**
   * <pre>
   * Cinder represents a cinder volume attached and mounted on kubelets host machine
   * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.CinderVolumeSource getCinder() {
    return cinder_ == null ? com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.getDefaultInstance() : cinder_;
  }
  /**
   * <pre>
   * Cinder represents a cinder volume attached and mounted on kubelets host machine
   * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.CinderVolumeSourceOrBuilder getCinderOrBuilder() {
    return getCinder();
  }

  public static final int CEPHFS_FIELD_NUMBER = 9;
  private com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource cephfs_;
  /**
   * <pre>
   * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
   */
  public boolean hasCephfs() {
    return cephfs_ != null;
  }
  /**
   * <pre>
   * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource getCephfs() {
    return cephfs_ == null ? com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.getDefaultInstance() : cephfs_;
  }
  /**
   * <pre>
   * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.CephFSVolumeSourceOrBuilder getCephfsOrBuilder() {
    return getCephfs();
  }

  public static final int FC_FIELD_NUMBER = 10;
  private com.appscode.api.kubernetes.v1beta2.FCVolumeSource fc_;
  /**
   * <pre>
   * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
   */
  public boolean hasFc() {
    return fc_ != null;
  }
  /**
   * <pre>
   * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.FCVolumeSource getFc() {
    return fc_ == null ? com.appscode.api.kubernetes.v1beta2.FCVolumeSource.getDefaultInstance() : fc_;
  }
  /**
   * <pre>
   * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.FCVolumeSourceOrBuilder getFcOrBuilder() {
    return getFc();
  }

  public static final int FLOCKER_FIELD_NUMBER = 11;
  private com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource flocker_;
  /**
   * <pre>
   * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
   */
  public boolean hasFlocker() {
    return flocker_ != null;
  }
  /**
   * <pre>
   * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource getFlocker() {
    return flocker_ == null ? com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.getDefaultInstance() : flocker_;
  }
  /**
   * <pre>
   * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.FlockerVolumeSourceOrBuilder getFlockerOrBuilder() {
    return getFlocker();
  }

  public static final int FLEXVOLUME_FIELD_NUMBER = 12;
  private com.appscode.api.kubernetes.v1beta2.FlexVolumeSource flexVolume_;
  /**
   * <pre>
   * FlexVolume represents a generic volume resource that is
   * provisioned/attached using an exec based plugin. This is an
   * alpha feature and may change in future.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
   */
  public boolean hasFlexVolume() {
    return flexVolume_ != null;
  }
  /**
   * <pre>
   * FlexVolume represents a generic volume resource that is
   * provisioned/attached using an exec based plugin. This is an
   * alpha feature and may change in future.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.FlexVolumeSource getFlexVolume() {
    return flexVolume_ == null ? com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.getDefaultInstance() : flexVolume_;
  }
  /**
   * <pre>
   * FlexVolume represents a generic volume resource that is
   * provisioned/attached using an exec based plugin. This is an
   * alpha feature and may change in future.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.FlexVolumeSourceOrBuilder getFlexVolumeOrBuilder() {
    return getFlexVolume();
  }

  public static final int AZUREFILE_FIELD_NUMBER = 13;
  private com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource azureFile_;
  /**
   * <pre>
   * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
   */
  public boolean hasAzureFile() {
    return azureFile_ != null;
  }
  /**
   * <pre>
   * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource getAzureFile() {
    return azureFile_ == null ? com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.getDefaultInstance() : azureFile_;
  }
  /**
   * <pre>
   * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSourceOrBuilder getAzureFileOrBuilder() {
    return getAzureFile();
  }

  public static final int VSPHEREVOLUME_FIELD_NUMBER = 14;
  private com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume_;
  /**
   * <pre>
   * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
   */
  public boolean hasVsphereVolume() {
    return vsphereVolume_ != null;
  }
  /**
   * <pre>
   * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource getVsphereVolume() {
    return vsphereVolume_ == null ? com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.getDefaultInstance() : vsphereVolume_;
  }
  /**
   * <pre>
   * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSourceOrBuilder getVsphereVolumeOrBuilder() {
    return getVsphereVolume();
  }

  public static final int QUOBYTE_FIELD_NUMBER = 15;
  private com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource quobyte_;
  /**
   * <pre>
   * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
   */
  public boolean hasQuobyte() {
    return quobyte_ != null;
  }
  /**
   * <pre>
   * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource getQuobyte() {
    return quobyte_ == null ? com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.getDefaultInstance() : quobyte_;
  }
  /**
   * <pre>
   * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSourceOrBuilder getQuobyteOrBuilder() {
    return getQuobyte();
  }

  public static final int AZUREDISK_FIELD_NUMBER = 16;
  private com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk_;
  /**
   * <pre>
   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
   */
  public boolean hasAzureDisk() {
    return azureDisk_ != null;
  }
  /**
   * <pre>
   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource getAzureDisk() {
    return azureDisk_ == null ? com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.getDefaultInstance() : azureDisk_;
  }
  /**
   * <pre>
   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
   * </pre>
   *
   * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
   */
  public com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSourceOrBuilder getAzureDiskOrBuilder() {
    return getAzureDisk();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (gcePersistentDisk_ != null) {
      output.writeMessage(1, getGcePersistentDisk());
    }
    if (awsElasticBlockStore_ != null) {
      output.writeMessage(2, getAwsElasticBlockStore());
    }
    if (hostPath_ != null) {
      output.writeMessage(3, getHostPath());
    }
    if (glusterfs_ != null) {
      output.writeMessage(4, getGlusterfs());
    }
    if (nfs_ != null) {
      output.writeMessage(5, getNfs());
    }
    if (rbd_ != null) {
      output.writeMessage(6, getRbd());
    }
    if (iscsi_ != null) {
      output.writeMessage(7, getIscsi());
    }
    if (cinder_ != null) {
      output.writeMessage(8, getCinder());
    }
    if (cephfs_ != null) {
      output.writeMessage(9, getCephfs());
    }
    if (fc_ != null) {
      output.writeMessage(10, getFc());
    }
    if (flocker_ != null) {
      output.writeMessage(11, getFlocker());
    }
    if (flexVolume_ != null) {
      output.writeMessage(12, getFlexVolume());
    }
    if (azureFile_ != null) {
      output.writeMessage(13, getAzureFile());
    }
    if (vsphereVolume_ != null) {
      output.writeMessage(14, getVsphereVolume());
    }
    if (quobyte_ != null) {
      output.writeMessage(15, getQuobyte());
    }
    if (azureDisk_ != null) {
      output.writeMessage(16, getAzureDisk());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (gcePersistentDisk_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getGcePersistentDisk());
    }
    if (awsElasticBlockStore_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getAwsElasticBlockStore());
    }
    if (hostPath_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getHostPath());
    }
    if (glusterfs_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getGlusterfs());
    }
    if (nfs_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getNfs());
    }
    if (rbd_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getRbd());
    }
    if (iscsi_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getIscsi());
    }
    if (cinder_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getCinder());
    }
    if (cephfs_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getCephfs());
    }
    if (fc_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getFc());
    }
    if (flocker_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getFlocker());
    }
    if (flexVolume_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getFlexVolume());
    }
    if (azureFile_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getAzureFile());
    }
    if (vsphereVolume_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getVsphereVolume());
    }
    if (quobyte_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, getQuobyte());
    }
    if (azureDisk_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getAzureDisk());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource)) {
      return super.equals(obj);
    }
    com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource other = (com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource) obj;

    boolean result = true;
    result = result && (hasGcePersistentDisk() == other.hasGcePersistentDisk());
    if (hasGcePersistentDisk()) {
      result = result && getGcePersistentDisk()
          .equals(other.getGcePersistentDisk());
    }
    result = result && (hasAwsElasticBlockStore() == other.hasAwsElasticBlockStore());
    if (hasAwsElasticBlockStore()) {
      result = result && getAwsElasticBlockStore()
          .equals(other.getAwsElasticBlockStore());
    }
    result = result && (hasHostPath() == other.hasHostPath());
    if (hasHostPath()) {
      result = result && getHostPath()
          .equals(other.getHostPath());
    }
    result = result && (hasGlusterfs() == other.hasGlusterfs());
    if (hasGlusterfs()) {
      result = result && getGlusterfs()
          .equals(other.getGlusterfs());
    }
    result = result && (hasNfs() == other.hasNfs());
    if (hasNfs()) {
      result = result && getNfs()
          .equals(other.getNfs());
    }
    result = result && (hasRbd() == other.hasRbd());
    if (hasRbd()) {
      result = result && getRbd()
          .equals(other.getRbd());
    }
    result = result && (hasIscsi() == other.hasIscsi());
    if (hasIscsi()) {
      result = result && getIscsi()
          .equals(other.getIscsi());
    }
    result = result && (hasCinder() == other.hasCinder());
    if (hasCinder()) {
      result = result && getCinder()
          .equals(other.getCinder());
    }
    result = result && (hasCephfs() == other.hasCephfs());
    if (hasCephfs()) {
      result = result && getCephfs()
          .equals(other.getCephfs());
    }
    result = result && (hasFc() == other.hasFc());
    if (hasFc()) {
      result = result && getFc()
          .equals(other.getFc());
    }
    result = result && (hasFlocker() == other.hasFlocker());
    if (hasFlocker()) {
      result = result && getFlocker()
          .equals(other.getFlocker());
    }
    result = result && (hasFlexVolume() == other.hasFlexVolume());
    if (hasFlexVolume()) {
      result = result && getFlexVolume()
          .equals(other.getFlexVolume());
    }
    result = result && (hasAzureFile() == other.hasAzureFile());
    if (hasAzureFile()) {
      result = result && getAzureFile()
          .equals(other.getAzureFile());
    }
    result = result && (hasVsphereVolume() == other.hasVsphereVolume());
    if (hasVsphereVolume()) {
      result = result && getVsphereVolume()
          .equals(other.getVsphereVolume());
    }
    result = result && (hasQuobyte() == other.hasQuobyte());
    if (hasQuobyte()) {
      result = result && getQuobyte()
          .equals(other.getQuobyte());
    }
    result = result && (hasAzureDisk() == other.hasAzureDisk());
    if (hasAzureDisk()) {
      result = result && getAzureDisk()
          .equals(other.getAzureDisk());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (hasGcePersistentDisk()) {
      hash = (37 * hash) + GCEPERSISTENTDISK_FIELD_NUMBER;
      hash = (53 * hash) + getGcePersistentDisk().hashCode();
    }
    if (hasAwsElasticBlockStore()) {
      hash = (37 * hash) + AWSELASTICBLOCKSTORE_FIELD_NUMBER;
      hash = (53 * hash) + getAwsElasticBlockStore().hashCode();
    }
    if (hasHostPath()) {
      hash = (37 * hash) + HOSTPATH_FIELD_NUMBER;
      hash = (53 * hash) + getHostPath().hashCode();
    }
    if (hasGlusterfs()) {
      hash = (37 * hash) + GLUSTERFS_FIELD_NUMBER;
      hash = (53 * hash) + getGlusterfs().hashCode();
    }
    if (hasNfs()) {
      hash = (37 * hash) + NFS_FIELD_NUMBER;
      hash = (53 * hash) + getNfs().hashCode();
    }
    if (hasRbd()) {
      hash = (37 * hash) + RBD_FIELD_NUMBER;
      hash = (53 * hash) + getRbd().hashCode();
    }
    if (hasIscsi()) {
      hash = (37 * hash) + ISCSI_FIELD_NUMBER;
      hash = (53 * hash) + getIscsi().hashCode();
    }
    if (hasCinder()) {
      hash = (37 * hash) + CINDER_FIELD_NUMBER;
      hash = (53 * hash) + getCinder().hashCode();
    }
    if (hasCephfs()) {
      hash = (37 * hash) + CEPHFS_FIELD_NUMBER;
      hash = (53 * hash) + getCephfs().hashCode();
    }
    if (hasFc()) {
      hash = (37 * hash) + FC_FIELD_NUMBER;
      hash = (53 * hash) + getFc().hashCode();
    }
    if (hasFlocker()) {
      hash = (37 * hash) + FLOCKER_FIELD_NUMBER;
      hash = (53 * hash) + getFlocker().hashCode();
    }
    if (hasFlexVolume()) {
      hash = (37 * hash) + FLEXVOLUME_FIELD_NUMBER;
      hash = (53 * hash) + getFlexVolume().hashCode();
    }
    if (hasAzureFile()) {
      hash = (37 * hash) + AZUREFILE_FIELD_NUMBER;
      hash = (53 * hash) + getAzureFile().hashCode();
    }
    if (hasVsphereVolume()) {
      hash = (37 * hash) + VSPHEREVOLUME_FIELD_NUMBER;
      hash = (53 * hash) + getVsphereVolume().hashCode();
    }
    if (hasQuobyte()) {
      hash = (37 * hash) + QUOBYTE_FIELD_NUMBER;
      hash = (53 * hash) + getQuobyte().hashCode();
    }
    if (hasAzureDisk()) {
      hash = (37 * hash) + AZUREDISK_FIELD_NUMBER;
      hash = (53 * hash) + getAzureDisk().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * PersistentVolumeSource is similar to VolumeSource but meant for the
   * administrator who creates PVs. Exactly one of its members must be set.
   * </pre>
   *
   * Protobuf type {@code appscode.kubernetes.v1beta2.PersistentVolumeSource}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:appscode.kubernetes.v1beta2.PersistentVolumeSource)
      com.appscode.api.kubernetes.v1beta2.PersistentVolumeSourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_PersistentVolumeSource_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_PersistentVolumeSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.class, com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.Builder.class);
    }

    // Construct using com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (gcePersistentDiskBuilder_ == null) {
        gcePersistentDisk_ = null;
      } else {
        gcePersistentDisk_ = null;
        gcePersistentDiskBuilder_ = null;
      }
      if (awsElasticBlockStoreBuilder_ == null) {
        awsElasticBlockStore_ = null;
      } else {
        awsElasticBlockStore_ = null;
        awsElasticBlockStoreBuilder_ = null;
      }
      if (hostPathBuilder_ == null) {
        hostPath_ = null;
      } else {
        hostPath_ = null;
        hostPathBuilder_ = null;
      }
      if (glusterfsBuilder_ == null) {
        glusterfs_ = null;
      } else {
        glusterfs_ = null;
        glusterfsBuilder_ = null;
      }
      if (nfsBuilder_ == null) {
        nfs_ = null;
      } else {
        nfs_ = null;
        nfsBuilder_ = null;
      }
      if (rbdBuilder_ == null) {
        rbd_ = null;
      } else {
        rbd_ = null;
        rbdBuilder_ = null;
      }
      if (iscsiBuilder_ == null) {
        iscsi_ = null;
      } else {
        iscsi_ = null;
        iscsiBuilder_ = null;
      }
      if (cinderBuilder_ == null) {
        cinder_ = null;
      } else {
        cinder_ = null;
        cinderBuilder_ = null;
      }
      if (cephfsBuilder_ == null) {
        cephfs_ = null;
      } else {
        cephfs_ = null;
        cephfsBuilder_ = null;
      }
      if (fcBuilder_ == null) {
        fc_ = null;
      } else {
        fc_ = null;
        fcBuilder_ = null;
      }
      if (flockerBuilder_ == null) {
        flocker_ = null;
      } else {
        flocker_ = null;
        flockerBuilder_ = null;
      }
      if (flexVolumeBuilder_ == null) {
        flexVolume_ = null;
      } else {
        flexVolume_ = null;
        flexVolumeBuilder_ = null;
      }
      if (azureFileBuilder_ == null) {
        azureFile_ = null;
      } else {
        azureFile_ = null;
        azureFileBuilder_ = null;
      }
      if (vsphereVolumeBuilder_ == null) {
        vsphereVolume_ = null;
      } else {
        vsphereVolume_ = null;
        vsphereVolumeBuilder_ = null;
      }
      if (quobyteBuilder_ == null) {
        quobyte_ = null;
      } else {
        quobyte_ = null;
        quobyteBuilder_ = null;
      }
      if (azureDiskBuilder_ == null) {
        azureDisk_ = null;
      } else {
        azureDisk_ = null;
        azureDiskBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.appscode.api.kubernetes.v1beta2.ClientProto.internal_static_appscode_kubernetes_v1beta2_PersistentVolumeSource_descriptor;
    }

    public com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource getDefaultInstanceForType() {
      return com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.getDefaultInstance();
    }

    public com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource build() {
      com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource buildPartial() {
      com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource result = new com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource(this);
      if (gcePersistentDiskBuilder_ == null) {
        result.gcePersistentDisk_ = gcePersistentDisk_;
      } else {
        result.gcePersistentDisk_ = gcePersistentDiskBuilder_.build();
      }
      if (awsElasticBlockStoreBuilder_ == null) {
        result.awsElasticBlockStore_ = awsElasticBlockStore_;
      } else {
        result.awsElasticBlockStore_ = awsElasticBlockStoreBuilder_.build();
      }
      if (hostPathBuilder_ == null) {
        result.hostPath_ = hostPath_;
      } else {
        result.hostPath_ = hostPathBuilder_.build();
      }
      if (glusterfsBuilder_ == null) {
        result.glusterfs_ = glusterfs_;
      } else {
        result.glusterfs_ = glusterfsBuilder_.build();
      }
      if (nfsBuilder_ == null) {
        result.nfs_ = nfs_;
      } else {
        result.nfs_ = nfsBuilder_.build();
      }
      if (rbdBuilder_ == null) {
        result.rbd_ = rbd_;
      } else {
        result.rbd_ = rbdBuilder_.build();
      }
      if (iscsiBuilder_ == null) {
        result.iscsi_ = iscsi_;
      } else {
        result.iscsi_ = iscsiBuilder_.build();
      }
      if (cinderBuilder_ == null) {
        result.cinder_ = cinder_;
      } else {
        result.cinder_ = cinderBuilder_.build();
      }
      if (cephfsBuilder_ == null) {
        result.cephfs_ = cephfs_;
      } else {
        result.cephfs_ = cephfsBuilder_.build();
      }
      if (fcBuilder_ == null) {
        result.fc_ = fc_;
      } else {
        result.fc_ = fcBuilder_.build();
      }
      if (flockerBuilder_ == null) {
        result.flocker_ = flocker_;
      } else {
        result.flocker_ = flockerBuilder_.build();
      }
      if (flexVolumeBuilder_ == null) {
        result.flexVolume_ = flexVolume_;
      } else {
        result.flexVolume_ = flexVolumeBuilder_.build();
      }
      if (azureFileBuilder_ == null) {
        result.azureFile_ = azureFile_;
      } else {
        result.azureFile_ = azureFileBuilder_.build();
      }
      if (vsphereVolumeBuilder_ == null) {
        result.vsphereVolume_ = vsphereVolume_;
      } else {
        result.vsphereVolume_ = vsphereVolumeBuilder_.build();
      }
      if (quobyteBuilder_ == null) {
        result.quobyte_ = quobyte_;
      } else {
        result.quobyte_ = quobyteBuilder_.build();
      }
      if (azureDiskBuilder_ == null) {
        result.azureDisk_ = azureDisk_;
      } else {
        result.azureDisk_ = azureDiskBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource) {
        return mergeFrom((com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource other) {
      if (other == com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource.getDefaultInstance()) return this;
      if (other.hasGcePersistentDisk()) {
        mergeGcePersistentDisk(other.getGcePersistentDisk());
      }
      if (other.hasAwsElasticBlockStore()) {
        mergeAwsElasticBlockStore(other.getAwsElasticBlockStore());
      }
      if (other.hasHostPath()) {
        mergeHostPath(other.getHostPath());
      }
      if (other.hasGlusterfs()) {
        mergeGlusterfs(other.getGlusterfs());
      }
      if (other.hasNfs()) {
        mergeNfs(other.getNfs());
      }
      if (other.hasRbd()) {
        mergeRbd(other.getRbd());
      }
      if (other.hasIscsi()) {
        mergeIscsi(other.getIscsi());
      }
      if (other.hasCinder()) {
        mergeCinder(other.getCinder());
      }
      if (other.hasCephfs()) {
        mergeCephfs(other.getCephfs());
      }
      if (other.hasFc()) {
        mergeFc(other.getFc());
      }
      if (other.hasFlocker()) {
        mergeFlocker(other.getFlocker());
      }
      if (other.hasFlexVolume()) {
        mergeFlexVolume(other.getFlexVolume());
      }
      if (other.hasAzureFile()) {
        mergeAzureFile(other.getAzureFile());
      }
      if (other.hasVsphereVolume()) {
        mergeVsphereVolume(other.getVsphereVolume());
      }
      if (other.hasQuobyte()) {
        mergeQuobyte(other.getQuobyte());
      }
      if (other.hasAzureDisk()) {
        mergeAzureDisk(other.getAzureDisk());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSourceOrBuilder> gcePersistentDiskBuilder_;
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public boolean hasGcePersistentDisk() {
      return gcePersistentDiskBuilder_ != null || gcePersistentDisk_ != null;
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource getGcePersistentDisk() {
      if (gcePersistentDiskBuilder_ == null) {
        return gcePersistentDisk_ == null ? com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.getDefaultInstance() : gcePersistentDisk_;
      } else {
        return gcePersistentDiskBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public Builder setGcePersistentDisk(com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource value) {
      if (gcePersistentDiskBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        gcePersistentDisk_ = value;
        onChanged();
      } else {
        gcePersistentDiskBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public Builder setGcePersistentDisk(
        com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder builderForValue) {
      if (gcePersistentDiskBuilder_ == null) {
        gcePersistentDisk_ = builderForValue.build();
        onChanged();
      } else {
        gcePersistentDiskBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public Builder mergeGcePersistentDisk(com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource value) {
      if (gcePersistentDiskBuilder_ == null) {
        if (gcePersistentDisk_ != null) {
          gcePersistentDisk_ =
            com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.newBuilder(gcePersistentDisk_).mergeFrom(value).buildPartial();
        } else {
          gcePersistentDisk_ = value;
        }
        onChanged();
      } else {
        gcePersistentDiskBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public Builder clearGcePersistentDisk() {
      if (gcePersistentDiskBuilder_ == null) {
        gcePersistentDisk_ = null;
        onChanged();
      } else {
        gcePersistentDisk_ = null;
        gcePersistentDiskBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder getGcePersistentDiskBuilder() {
      
      onChanged();
      return getGcePersistentDiskFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSourceOrBuilder getGcePersistentDiskOrBuilder() {
      if (gcePersistentDiskBuilder_ != null) {
        return gcePersistentDiskBuilder_.getMessageOrBuilder();
      } else {
        return gcePersistentDisk_ == null ?
            com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.getDefaultInstance() : gcePersistentDisk_;
      }
    }
    /**
     * <pre>
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource gcePersistentDisk = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSourceOrBuilder> 
        getGcePersistentDiskFieldBuilder() {
      if (gcePersistentDiskBuilder_ == null) {
        gcePersistentDiskBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.GCEPersistentDiskVolumeSourceOrBuilder>(
                getGcePersistentDisk(),
                getParentForChildren(),
                isClean());
        gcePersistentDisk_ = null;
      }
      return gcePersistentDiskBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource, com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSourceOrBuilder> awsElasticBlockStoreBuilder_;
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public boolean hasAwsElasticBlockStore() {
      return awsElasticBlockStoreBuilder_ != null || awsElasticBlockStore_ != null;
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource getAwsElasticBlockStore() {
      if (awsElasticBlockStoreBuilder_ == null) {
        return awsElasticBlockStore_ == null ? com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.getDefaultInstance() : awsElasticBlockStore_;
      } else {
        return awsElasticBlockStoreBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public Builder setAwsElasticBlockStore(com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource value) {
      if (awsElasticBlockStoreBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        awsElasticBlockStore_ = value;
        onChanged();
      } else {
        awsElasticBlockStoreBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public Builder setAwsElasticBlockStore(
        com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.Builder builderForValue) {
      if (awsElasticBlockStoreBuilder_ == null) {
        awsElasticBlockStore_ = builderForValue.build();
        onChanged();
      } else {
        awsElasticBlockStoreBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public Builder mergeAwsElasticBlockStore(com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource value) {
      if (awsElasticBlockStoreBuilder_ == null) {
        if (awsElasticBlockStore_ != null) {
          awsElasticBlockStore_ =
            com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.newBuilder(awsElasticBlockStore_).mergeFrom(value).buildPartial();
        } else {
          awsElasticBlockStore_ = value;
        }
        onChanged();
      } else {
        awsElasticBlockStoreBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public Builder clearAwsElasticBlockStore() {
      if (awsElasticBlockStoreBuilder_ == null) {
        awsElasticBlockStore_ = null;
        onChanged();
      } else {
        awsElasticBlockStore_ = null;
        awsElasticBlockStoreBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.Builder getAwsElasticBlockStoreBuilder() {
      
      onChanged();
      return getAwsElasticBlockStoreFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSourceOrBuilder getAwsElasticBlockStoreOrBuilder() {
      if (awsElasticBlockStoreBuilder_ != null) {
        return awsElasticBlockStoreBuilder_.getMessageOrBuilder();
      } else {
        return awsElasticBlockStore_ == null ?
            com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.getDefaultInstance() : awsElasticBlockStore_;
      }
    }
    /**
     * <pre>
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource, com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSourceOrBuilder> 
        getAwsElasticBlockStoreFieldBuilder() {
      if (awsElasticBlockStoreBuilder_ == null) {
        awsElasticBlockStoreBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource, com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSourceOrBuilder>(
                getAwsElasticBlockStore(),
                getParentForChildren(),
                isClean());
        awsElasticBlockStore_ = null;
      }
      return awsElasticBlockStoreBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource hostPath_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource, com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.HostPathVolumeSourceOrBuilder> hostPathBuilder_;
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public boolean hasHostPath() {
      return hostPathBuilder_ != null || hostPath_ != null;
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource getHostPath() {
      if (hostPathBuilder_ == null) {
        return hostPath_ == null ? com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.getDefaultInstance() : hostPath_;
      } else {
        return hostPathBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public Builder setHostPath(com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource value) {
      if (hostPathBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hostPath_ = value;
        onChanged();
      } else {
        hostPathBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public Builder setHostPath(
        com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.Builder builderForValue) {
      if (hostPathBuilder_ == null) {
        hostPath_ = builderForValue.build();
        onChanged();
      } else {
        hostPathBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public Builder mergeHostPath(com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource value) {
      if (hostPathBuilder_ == null) {
        if (hostPath_ != null) {
          hostPath_ =
            com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.newBuilder(hostPath_).mergeFrom(value).buildPartial();
        } else {
          hostPath_ = value;
        }
        onChanged();
      } else {
        hostPathBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public Builder clearHostPath() {
      if (hostPathBuilder_ == null) {
        hostPath_ = null;
        onChanged();
      } else {
        hostPath_ = null;
        hostPathBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.Builder getHostPathBuilder() {
      
      onChanged();
      return getHostPathFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.HostPathVolumeSourceOrBuilder getHostPathOrBuilder() {
      if (hostPathBuilder_ != null) {
        return hostPathBuilder_.getMessageOrBuilder();
      } else {
        return hostPath_ == null ?
            com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.getDefaultInstance() : hostPath_;
      }
    }
    /**
     * <pre>
     * HostPath represents a directory on the host.
     * Provisioned by a developer or tester.
     * This is useful for single-node development and testing only!
     * On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.HostPathVolumeSource hostPath = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource, com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.HostPathVolumeSourceOrBuilder> 
        getHostPathFieldBuilder() {
      if (hostPathBuilder_ == null) {
        hostPathBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource, com.appscode.api.kubernetes.v1beta2.HostPathVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.HostPathVolumeSourceOrBuilder>(
                getHostPath(),
                getParentForChildren(),
                isClean());
        hostPath_ = null;
      }
      return hostPathBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource, com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSourceOrBuilder> glusterfsBuilder_;
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public boolean hasGlusterfs() {
      return glusterfsBuilder_ != null || glusterfs_ != null;
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource getGlusterfs() {
      if (glusterfsBuilder_ == null) {
        return glusterfs_ == null ? com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.getDefaultInstance() : glusterfs_;
      } else {
        return glusterfsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public Builder setGlusterfs(com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource value) {
      if (glusterfsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        glusterfs_ = value;
        onChanged();
      } else {
        glusterfsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public Builder setGlusterfs(
        com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.Builder builderForValue) {
      if (glusterfsBuilder_ == null) {
        glusterfs_ = builderForValue.build();
        onChanged();
      } else {
        glusterfsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public Builder mergeGlusterfs(com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource value) {
      if (glusterfsBuilder_ == null) {
        if (glusterfs_ != null) {
          glusterfs_ =
            com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.newBuilder(glusterfs_).mergeFrom(value).buildPartial();
        } else {
          glusterfs_ = value;
        }
        onChanged();
      } else {
        glusterfsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public Builder clearGlusterfs() {
      if (glusterfsBuilder_ == null) {
        glusterfs_ = null;
        onChanged();
      } else {
        glusterfs_ = null;
        glusterfsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.Builder getGlusterfsBuilder() {
      
      onChanged();
      return getGlusterfsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSourceOrBuilder getGlusterfsOrBuilder() {
      if (glusterfsBuilder_ != null) {
        return glusterfsBuilder_.getMessageOrBuilder();
      } else {
        return glusterfs_ == null ?
            com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.getDefaultInstance() : glusterfs_;
      }
    }
    /**
     * <pre>
     * Glusterfs represents a Glusterfs volume that is attached to a host and
     * exposed to the pod. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.GlusterfsVolumeSource glusterfs = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource, com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSourceOrBuilder> 
        getGlusterfsFieldBuilder() {
      if (glusterfsBuilder_ == null) {
        glusterfsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource, com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.GlusterfsVolumeSourceOrBuilder>(
                getGlusterfs(),
                getParentForChildren(),
                isClean());
        glusterfs_ = null;
      }
      return glusterfsBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.NFSVolumeSource nfs_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.NFSVolumeSource, com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.NFSVolumeSourceOrBuilder> nfsBuilder_;
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public boolean hasNfs() {
      return nfsBuilder_ != null || nfs_ != null;
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.NFSVolumeSource getNfs() {
      if (nfsBuilder_ == null) {
        return nfs_ == null ? com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.getDefaultInstance() : nfs_;
      } else {
        return nfsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public Builder setNfs(com.appscode.api.kubernetes.v1beta2.NFSVolumeSource value) {
      if (nfsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        nfs_ = value;
        onChanged();
      } else {
        nfsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public Builder setNfs(
        com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.Builder builderForValue) {
      if (nfsBuilder_ == null) {
        nfs_ = builderForValue.build();
        onChanged();
      } else {
        nfsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public Builder mergeNfs(com.appscode.api.kubernetes.v1beta2.NFSVolumeSource value) {
      if (nfsBuilder_ == null) {
        if (nfs_ != null) {
          nfs_ =
            com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.newBuilder(nfs_).mergeFrom(value).buildPartial();
        } else {
          nfs_ = value;
        }
        onChanged();
      } else {
        nfsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public Builder clearNfs() {
      if (nfsBuilder_ == null) {
        nfs_ = null;
        onChanged();
      } else {
        nfs_ = null;
        nfsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.Builder getNfsBuilder() {
      
      onChanged();
      return getNfsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.NFSVolumeSourceOrBuilder getNfsOrBuilder() {
      if (nfsBuilder_ != null) {
        return nfsBuilder_.getMessageOrBuilder();
      } else {
        return nfs_ == null ?
            com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.getDefaultInstance() : nfs_;
      }
    }
    /**
     * <pre>
     * NFS represents an NFS mount on the host. Provisioned by an admin.
     * More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.NFSVolumeSource nfs = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.NFSVolumeSource, com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.NFSVolumeSourceOrBuilder> 
        getNfsFieldBuilder() {
      if (nfsBuilder_ == null) {
        nfsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.NFSVolumeSource, com.appscode.api.kubernetes.v1beta2.NFSVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.NFSVolumeSourceOrBuilder>(
                getNfs(),
                getParentForChildren(),
                isClean());
        nfs_ = null;
      }
      return nfsBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.RBDVolumeSource rbd_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.RBDVolumeSource, com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.RBDVolumeSourceOrBuilder> rbdBuilder_;
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public boolean hasRbd() {
      return rbdBuilder_ != null || rbd_ != null;
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.RBDVolumeSource getRbd() {
      if (rbdBuilder_ == null) {
        return rbd_ == null ? com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.getDefaultInstance() : rbd_;
      } else {
        return rbdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public Builder setRbd(com.appscode.api.kubernetes.v1beta2.RBDVolumeSource value) {
      if (rbdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rbd_ = value;
        onChanged();
      } else {
        rbdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public Builder setRbd(
        com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.Builder builderForValue) {
      if (rbdBuilder_ == null) {
        rbd_ = builderForValue.build();
        onChanged();
      } else {
        rbdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public Builder mergeRbd(com.appscode.api.kubernetes.v1beta2.RBDVolumeSource value) {
      if (rbdBuilder_ == null) {
        if (rbd_ != null) {
          rbd_ =
            com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.newBuilder(rbd_).mergeFrom(value).buildPartial();
        } else {
          rbd_ = value;
        }
        onChanged();
      } else {
        rbdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public Builder clearRbd() {
      if (rbdBuilder_ == null) {
        rbd_ = null;
        onChanged();
      } else {
        rbd_ = null;
        rbdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.Builder getRbdBuilder() {
      
      onChanged();
      return getRbdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.RBDVolumeSourceOrBuilder getRbdOrBuilder() {
      if (rbdBuilder_ != null) {
        return rbdBuilder_.getMessageOrBuilder();
      } else {
        return rbd_ == null ?
            com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.getDefaultInstance() : rbd_;
      }
    }
    /**
     * <pre>
     * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
     * More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.RBDVolumeSource rbd = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.RBDVolumeSource, com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.RBDVolumeSourceOrBuilder> 
        getRbdFieldBuilder() {
      if (rbdBuilder_ == null) {
        rbdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.RBDVolumeSource, com.appscode.api.kubernetes.v1beta2.RBDVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.RBDVolumeSourceOrBuilder>(
                getRbd(),
                getParentForChildren(),
                isClean());
        rbd_ = null;
      }
      return rbdBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource iscsi_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSourceOrBuilder> iscsiBuilder_;
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public boolean hasIscsi() {
      return iscsiBuilder_ != null || iscsi_ != null;
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource getIscsi() {
      if (iscsiBuilder_ == null) {
        return iscsi_ == null ? com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.getDefaultInstance() : iscsi_;
      } else {
        return iscsiBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public Builder setIscsi(com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource value) {
      if (iscsiBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        iscsi_ = value;
        onChanged();
      } else {
        iscsiBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public Builder setIscsi(
        com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder builderForValue) {
      if (iscsiBuilder_ == null) {
        iscsi_ = builderForValue.build();
        onChanged();
      } else {
        iscsiBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public Builder mergeIscsi(com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource value) {
      if (iscsiBuilder_ == null) {
        if (iscsi_ != null) {
          iscsi_ =
            com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.newBuilder(iscsi_).mergeFrom(value).buildPartial();
        } else {
          iscsi_ = value;
        }
        onChanged();
      } else {
        iscsiBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public Builder clearIscsi() {
      if (iscsiBuilder_ == null) {
        iscsi_ = null;
        onChanged();
      } else {
        iscsi_ = null;
        iscsiBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder getIscsiBuilder() {
      
      onChanged();
      return getIscsiFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSourceOrBuilder getIscsiOrBuilder() {
      if (iscsiBuilder_ != null) {
        return iscsiBuilder_.getMessageOrBuilder();
      } else {
        return iscsi_ == null ?
            com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.getDefaultInstance() : iscsi_;
      }
    }
    /**
     * <pre>
     * ISCSI represents an ISCSI Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.ISCSIVolumeSource iscsi = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSourceOrBuilder> 
        getIscsiFieldBuilder() {
      if (iscsiBuilder_ == null) {
        iscsiBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.ISCSIVolumeSourceOrBuilder>(
                getIscsi(),
                getParentForChildren(),
                isClean());
        iscsi_ = null;
      }
      return iscsiBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.CinderVolumeSource cinder_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.CinderVolumeSource, com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.CinderVolumeSourceOrBuilder> cinderBuilder_;
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public boolean hasCinder() {
      return cinderBuilder_ != null || cinder_ != null;
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.CinderVolumeSource getCinder() {
      if (cinderBuilder_ == null) {
        return cinder_ == null ? com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.getDefaultInstance() : cinder_;
      } else {
        return cinderBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public Builder setCinder(com.appscode.api.kubernetes.v1beta2.CinderVolumeSource value) {
      if (cinderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cinder_ = value;
        onChanged();
      } else {
        cinderBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public Builder setCinder(
        com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.Builder builderForValue) {
      if (cinderBuilder_ == null) {
        cinder_ = builderForValue.build();
        onChanged();
      } else {
        cinderBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public Builder mergeCinder(com.appscode.api.kubernetes.v1beta2.CinderVolumeSource value) {
      if (cinderBuilder_ == null) {
        if (cinder_ != null) {
          cinder_ =
            com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.newBuilder(cinder_).mergeFrom(value).buildPartial();
        } else {
          cinder_ = value;
        }
        onChanged();
      } else {
        cinderBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public Builder clearCinder() {
      if (cinderBuilder_ == null) {
        cinder_ = null;
        onChanged();
      } else {
        cinder_ = null;
        cinderBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.Builder getCinderBuilder() {
      
      onChanged();
      return getCinderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.CinderVolumeSourceOrBuilder getCinderOrBuilder() {
      if (cinderBuilder_ != null) {
        return cinderBuilder_.getMessageOrBuilder();
      } else {
        return cinder_ == null ?
            com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.getDefaultInstance() : cinder_;
      }
    }
    /**
     * <pre>
     * Cinder represents a cinder volume attached and mounted on kubelets host machine
     * More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CinderVolumeSource cinder = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.CinderVolumeSource, com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.CinderVolumeSourceOrBuilder> 
        getCinderFieldBuilder() {
      if (cinderBuilder_ == null) {
        cinderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.CinderVolumeSource, com.appscode.api.kubernetes.v1beta2.CinderVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.CinderVolumeSourceOrBuilder>(
                getCinder(),
                getParentForChildren(),
                isClean());
        cinder_ = null;
      }
      return cinderBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource cephfs_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource, com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.CephFSVolumeSourceOrBuilder> cephfsBuilder_;
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public boolean hasCephfs() {
      return cephfsBuilder_ != null || cephfs_ != null;
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource getCephfs() {
      if (cephfsBuilder_ == null) {
        return cephfs_ == null ? com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.getDefaultInstance() : cephfs_;
      } else {
        return cephfsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public Builder setCephfs(com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource value) {
      if (cephfsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cephfs_ = value;
        onChanged();
      } else {
        cephfsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public Builder setCephfs(
        com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.Builder builderForValue) {
      if (cephfsBuilder_ == null) {
        cephfs_ = builderForValue.build();
        onChanged();
      } else {
        cephfsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public Builder mergeCephfs(com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource value) {
      if (cephfsBuilder_ == null) {
        if (cephfs_ != null) {
          cephfs_ =
            com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.newBuilder(cephfs_).mergeFrom(value).buildPartial();
        } else {
          cephfs_ = value;
        }
        onChanged();
      } else {
        cephfsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public Builder clearCephfs() {
      if (cephfsBuilder_ == null) {
        cephfs_ = null;
        onChanged();
      } else {
        cephfs_ = null;
        cephfsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.Builder getCephfsBuilder() {
      
      onChanged();
      return getCephfsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.CephFSVolumeSourceOrBuilder getCephfsOrBuilder() {
      if (cephfsBuilder_ != null) {
        return cephfsBuilder_.getMessageOrBuilder();
      } else {
        return cephfs_ == null ?
            com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.getDefaultInstance() : cephfs_;
      }
    }
    /**
     * <pre>
     * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.CephFSVolumeSource cephfs = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource, com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.CephFSVolumeSourceOrBuilder> 
        getCephfsFieldBuilder() {
      if (cephfsBuilder_ == null) {
        cephfsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource, com.appscode.api.kubernetes.v1beta2.CephFSVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.CephFSVolumeSourceOrBuilder>(
                getCephfs(),
                getParentForChildren(),
                isClean());
        cephfs_ = null;
      }
      return cephfsBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.FCVolumeSource fc_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.FCVolumeSource, com.appscode.api.kubernetes.v1beta2.FCVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FCVolumeSourceOrBuilder> fcBuilder_;
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public boolean hasFc() {
      return fcBuilder_ != null || fc_ != null;
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FCVolumeSource getFc() {
      if (fcBuilder_ == null) {
        return fc_ == null ? com.appscode.api.kubernetes.v1beta2.FCVolumeSource.getDefaultInstance() : fc_;
      } else {
        return fcBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public Builder setFc(com.appscode.api.kubernetes.v1beta2.FCVolumeSource value) {
      if (fcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fc_ = value;
        onChanged();
      } else {
        fcBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public Builder setFc(
        com.appscode.api.kubernetes.v1beta2.FCVolumeSource.Builder builderForValue) {
      if (fcBuilder_ == null) {
        fc_ = builderForValue.build();
        onChanged();
      } else {
        fcBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public Builder mergeFc(com.appscode.api.kubernetes.v1beta2.FCVolumeSource value) {
      if (fcBuilder_ == null) {
        if (fc_ != null) {
          fc_ =
            com.appscode.api.kubernetes.v1beta2.FCVolumeSource.newBuilder(fc_).mergeFrom(value).buildPartial();
        } else {
          fc_ = value;
        }
        onChanged();
      } else {
        fcBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public Builder clearFc() {
      if (fcBuilder_ == null) {
        fc_ = null;
        onChanged();
      } else {
        fc_ = null;
        fcBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FCVolumeSource.Builder getFcBuilder() {
      
      onChanged();
      return getFcFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FCVolumeSourceOrBuilder getFcOrBuilder() {
      if (fcBuilder_ != null) {
        return fcBuilder_.getMessageOrBuilder();
      } else {
        return fc_ == null ?
            com.appscode.api.kubernetes.v1beta2.FCVolumeSource.getDefaultInstance() : fc_;
      }
    }
    /**
     * <pre>
     * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FCVolumeSource fc = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.FCVolumeSource, com.appscode.api.kubernetes.v1beta2.FCVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FCVolumeSourceOrBuilder> 
        getFcFieldBuilder() {
      if (fcBuilder_ == null) {
        fcBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.FCVolumeSource, com.appscode.api.kubernetes.v1beta2.FCVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FCVolumeSourceOrBuilder>(
                getFc(),
                getParentForChildren(),
                isClean());
        fc_ = null;
      }
      return fcBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource flocker_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource, com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FlockerVolumeSourceOrBuilder> flockerBuilder_;
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public boolean hasFlocker() {
      return flockerBuilder_ != null || flocker_ != null;
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource getFlocker() {
      if (flockerBuilder_ == null) {
        return flocker_ == null ? com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.getDefaultInstance() : flocker_;
      } else {
        return flockerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public Builder setFlocker(com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource value) {
      if (flockerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        flocker_ = value;
        onChanged();
      } else {
        flockerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public Builder setFlocker(
        com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.Builder builderForValue) {
      if (flockerBuilder_ == null) {
        flocker_ = builderForValue.build();
        onChanged();
      } else {
        flockerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public Builder mergeFlocker(com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource value) {
      if (flockerBuilder_ == null) {
        if (flocker_ != null) {
          flocker_ =
            com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.newBuilder(flocker_).mergeFrom(value).buildPartial();
        } else {
          flocker_ = value;
        }
        onChanged();
      } else {
        flockerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public Builder clearFlocker() {
      if (flockerBuilder_ == null) {
        flocker_ = null;
        onChanged();
      } else {
        flocker_ = null;
        flockerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.Builder getFlockerBuilder() {
      
      onChanged();
      return getFlockerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FlockerVolumeSourceOrBuilder getFlockerOrBuilder() {
      if (flockerBuilder_ != null) {
        return flockerBuilder_.getMessageOrBuilder();
      } else {
        return flocker_ == null ?
            com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.getDefaultInstance() : flocker_;
      }
    }
    /**
     * <pre>
     * Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlockerVolumeSource flocker = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource, com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FlockerVolumeSourceOrBuilder> 
        getFlockerFieldBuilder() {
      if (flockerBuilder_ == null) {
        flockerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource, com.appscode.api.kubernetes.v1beta2.FlockerVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FlockerVolumeSourceOrBuilder>(
                getFlocker(),
                getParentForChildren(),
                isClean());
        flocker_ = null;
      }
      return flockerBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.FlexVolumeSource flexVolume_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.FlexVolumeSource, com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FlexVolumeSourceOrBuilder> flexVolumeBuilder_;
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public boolean hasFlexVolume() {
      return flexVolumeBuilder_ != null || flexVolume_ != null;
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FlexVolumeSource getFlexVolume() {
      if (flexVolumeBuilder_ == null) {
        return flexVolume_ == null ? com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.getDefaultInstance() : flexVolume_;
      } else {
        return flexVolumeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public Builder setFlexVolume(com.appscode.api.kubernetes.v1beta2.FlexVolumeSource value) {
      if (flexVolumeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        flexVolume_ = value;
        onChanged();
      } else {
        flexVolumeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public Builder setFlexVolume(
        com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.Builder builderForValue) {
      if (flexVolumeBuilder_ == null) {
        flexVolume_ = builderForValue.build();
        onChanged();
      } else {
        flexVolumeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public Builder mergeFlexVolume(com.appscode.api.kubernetes.v1beta2.FlexVolumeSource value) {
      if (flexVolumeBuilder_ == null) {
        if (flexVolume_ != null) {
          flexVolume_ =
            com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.newBuilder(flexVolume_).mergeFrom(value).buildPartial();
        } else {
          flexVolume_ = value;
        }
        onChanged();
      } else {
        flexVolumeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public Builder clearFlexVolume() {
      if (flexVolumeBuilder_ == null) {
        flexVolume_ = null;
        onChanged();
      } else {
        flexVolume_ = null;
        flexVolumeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.Builder getFlexVolumeBuilder() {
      
      onChanged();
      return getFlexVolumeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.FlexVolumeSourceOrBuilder getFlexVolumeOrBuilder() {
      if (flexVolumeBuilder_ != null) {
        return flexVolumeBuilder_.getMessageOrBuilder();
      } else {
        return flexVolume_ == null ?
            com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.getDefaultInstance() : flexVolume_;
      }
    }
    /**
     * <pre>
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an
     * alpha feature and may change in future.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.FlexVolumeSource flexVolume = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.FlexVolumeSource, com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FlexVolumeSourceOrBuilder> 
        getFlexVolumeFieldBuilder() {
      if (flexVolumeBuilder_ == null) {
        flexVolumeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.FlexVolumeSource, com.appscode.api.kubernetes.v1beta2.FlexVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.FlexVolumeSourceOrBuilder>(
                getFlexVolume(),
                getParentForChildren(),
                isClean());
        flexVolume_ = null;
      }
      return flexVolumeBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource azureFile_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource, com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSourceOrBuilder> azureFileBuilder_;
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public boolean hasAzureFile() {
      return azureFileBuilder_ != null || azureFile_ != null;
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource getAzureFile() {
      if (azureFileBuilder_ == null) {
        return azureFile_ == null ? com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.getDefaultInstance() : azureFile_;
      } else {
        return azureFileBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public Builder setAzureFile(com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource value) {
      if (azureFileBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        azureFile_ = value;
        onChanged();
      } else {
        azureFileBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public Builder setAzureFile(
        com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.Builder builderForValue) {
      if (azureFileBuilder_ == null) {
        azureFile_ = builderForValue.build();
        onChanged();
      } else {
        azureFileBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public Builder mergeAzureFile(com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource value) {
      if (azureFileBuilder_ == null) {
        if (azureFile_ != null) {
          azureFile_ =
            com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.newBuilder(azureFile_).mergeFrom(value).buildPartial();
        } else {
          azureFile_ = value;
        }
        onChanged();
      } else {
        azureFileBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public Builder clearAzureFile() {
      if (azureFileBuilder_ == null) {
        azureFile_ = null;
        onChanged();
      } else {
        azureFile_ = null;
        azureFileBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.Builder getAzureFileBuilder() {
      
      onChanged();
      return getAzureFileFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSourceOrBuilder getAzureFileOrBuilder() {
      if (azureFileBuilder_ != null) {
        return azureFileBuilder_.getMessageOrBuilder();
      } else {
        return azureFile_ == null ?
            com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.getDefaultInstance() : azureFile_;
      }
    }
    /**
     * <pre>
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureFileVolumeSource azureFile = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource, com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSourceOrBuilder> 
        getAzureFileFieldBuilder() {
      if (azureFileBuilder_ == null) {
        azureFileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource, com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AzureFileVolumeSourceOrBuilder>(
                getAzureFile(),
                getParentForChildren(),
                isClean());
        azureFile_ = null;
      }
      return azureFileBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSourceOrBuilder> vsphereVolumeBuilder_;
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public boolean hasVsphereVolume() {
      return vsphereVolumeBuilder_ != null || vsphereVolume_ != null;
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource getVsphereVolume() {
      if (vsphereVolumeBuilder_ == null) {
        return vsphereVolume_ == null ? com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.getDefaultInstance() : vsphereVolume_;
      } else {
        return vsphereVolumeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public Builder setVsphereVolume(com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource value) {
      if (vsphereVolumeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vsphereVolume_ = value;
        onChanged();
      } else {
        vsphereVolumeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public Builder setVsphereVolume(
        com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.Builder builderForValue) {
      if (vsphereVolumeBuilder_ == null) {
        vsphereVolume_ = builderForValue.build();
        onChanged();
      } else {
        vsphereVolumeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public Builder mergeVsphereVolume(com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource value) {
      if (vsphereVolumeBuilder_ == null) {
        if (vsphereVolume_ != null) {
          vsphereVolume_ =
            com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.newBuilder(vsphereVolume_).mergeFrom(value).buildPartial();
        } else {
          vsphereVolume_ = value;
        }
        onChanged();
      } else {
        vsphereVolumeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public Builder clearVsphereVolume() {
      if (vsphereVolumeBuilder_ == null) {
        vsphereVolume_ = null;
        onChanged();
      } else {
        vsphereVolume_ = null;
        vsphereVolumeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.Builder getVsphereVolumeBuilder() {
      
      onChanged();
      return getVsphereVolumeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSourceOrBuilder getVsphereVolumeOrBuilder() {
      if (vsphereVolumeBuilder_ != null) {
        return vsphereVolumeBuilder_.getMessageOrBuilder();
      } else {
        return vsphereVolume_ == null ?
            com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.getDefaultInstance() : vsphereVolume_;
      }
    }
    /**
     * <pre>
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource vsphereVolume = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSourceOrBuilder> 
        getVsphereVolumeFieldBuilder() {
      if (vsphereVolumeBuilder_ == null) {
        vsphereVolumeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.VsphereVirtualDiskVolumeSourceOrBuilder>(
                getVsphereVolume(),
                getParentForChildren(),
                isClean());
        vsphereVolume_ = null;
      }
      return vsphereVolumeBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource quobyte_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource, com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSourceOrBuilder> quobyteBuilder_;
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public boolean hasQuobyte() {
      return quobyteBuilder_ != null || quobyte_ != null;
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource getQuobyte() {
      if (quobyteBuilder_ == null) {
        return quobyte_ == null ? com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.getDefaultInstance() : quobyte_;
      } else {
        return quobyteBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public Builder setQuobyte(com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource value) {
      if (quobyteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        quobyte_ = value;
        onChanged();
      } else {
        quobyteBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public Builder setQuobyte(
        com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.Builder builderForValue) {
      if (quobyteBuilder_ == null) {
        quobyte_ = builderForValue.build();
        onChanged();
      } else {
        quobyteBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public Builder mergeQuobyte(com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource value) {
      if (quobyteBuilder_ == null) {
        if (quobyte_ != null) {
          quobyte_ =
            com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.newBuilder(quobyte_).mergeFrom(value).buildPartial();
        } else {
          quobyte_ = value;
        }
        onChanged();
      } else {
        quobyteBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public Builder clearQuobyte() {
      if (quobyteBuilder_ == null) {
        quobyte_ = null;
        onChanged();
      } else {
        quobyte_ = null;
        quobyteBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.Builder getQuobyteBuilder() {
      
      onChanged();
      return getQuobyteFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSourceOrBuilder getQuobyteOrBuilder() {
      if (quobyteBuilder_ != null) {
        return quobyteBuilder_.getMessageOrBuilder();
      } else {
        return quobyte_ == null ?
            com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.getDefaultInstance() : quobyte_;
      }
    }
    /**
     * <pre>
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.QuobyteVolumeSource quobyte = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource, com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSourceOrBuilder> 
        getQuobyteFieldBuilder() {
      if (quobyteBuilder_ == null) {
        quobyteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource, com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.QuobyteVolumeSourceOrBuilder>(
                getQuobyte(),
                getParentForChildren(),
                isClean());
        quobyte_ = null;
      }
      return quobyteBuilder_;
    }

    private com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSourceOrBuilder> azureDiskBuilder_;
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public boolean hasAzureDisk() {
      return azureDiskBuilder_ != null || azureDisk_ != null;
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource getAzureDisk() {
      if (azureDiskBuilder_ == null) {
        return azureDisk_ == null ? com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.getDefaultInstance() : azureDisk_;
      } else {
        return azureDiskBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public Builder setAzureDisk(com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource value) {
      if (azureDiskBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        azureDisk_ = value;
        onChanged();
      } else {
        azureDiskBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public Builder setAzureDisk(
        com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.Builder builderForValue) {
      if (azureDiskBuilder_ == null) {
        azureDisk_ = builderForValue.build();
        onChanged();
      } else {
        azureDiskBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public Builder mergeAzureDisk(com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource value) {
      if (azureDiskBuilder_ == null) {
        if (azureDisk_ != null) {
          azureDisk_ =
            com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.newBuilder(azureDisk_).mergeFrom(value).buildPartial();
        } else {
          azureDisk_ = value;
        }
        onChanged();
      } else {
        azureDiskBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public Builder clearAzureDisk() {
      if (azureDiskBuilder_ == null) {
        azureDisk_ = null;
        onChanged();
      } else {
        azureDisk_ = null;
        azureDiskBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.Builder getAzureDiskBuilder() {
      
      onChanged();
      return getAzureDiskFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    public com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSourceOrBuilder getAzureDiskOrBuilder() {
      if (azureDiskBuilder_ != null) {
        return azureDiskBuilder_.getMessageOrBuilder();
      } else {
        return azureDisk_ == null ?
            com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.getDefaultInstance() : azureDisk_;
      }
    }
    /**
     * <pre>
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * </pre>
     *
     * <code>optional .appscode.kubernetes.v1beta2.AzureDiskVolumeSource azureDisk = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSourceOrBuilder> 
        getAzureDiskFieldBuilder() {
      if (azureDiskBuilder_ == null) {
        azureDiskBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource, com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSource.Builder, com.appscode.api.kubernetes.v1beta2.AzureDiskVolumeSourceOrBuilder>(
                getAzureDisk(),
                getParentForChildren(),
                isClean());
        azureDisk_ = null;
      }
      return azureDiskBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:appscode.kubernetes.v1beta2.PersistentVolumeSource)
  }

  // @@protoc_insertion_point(class_scope:appscode.kubernetes.v1beta2.PersistentVolumeSource)
  private static final com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource();
  }

  public static com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PersistentVolumeSource>
      PARSER = new com.google.protobuf.AbstractParser<PersistentVolumeSource>() {
    public PersistentVolumeSource parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new PersistentVolumeSource(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PersistentVolumeSource> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PersistentVolumeSource> getParserForType() {
    return PARSER;
  }

  public com.appscode.api.kubernetes.v1beta2.PersistentVolumeSource getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

